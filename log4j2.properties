package com.example;

import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

public class GitHubSearchAnalyzer {
    private static final String BASE_URL = "https://github.com/search?q=abc&type=repositories&p=";
    private static final HttpClient client = HttpClient.newHttpClient();

    public static void main(String[] args) {
        int page = 1;
        boolean hasMorePages = true;

        while (hasMorePages) {
            String url = BASE_URL + page;
            System.out.println("Fetching page: " + page);
            
            // 发送HTTP请求并获取响应
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(url))
                    .build();

            try {
                HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
                String html = response.body();

                // 解析HTML并检查是否有更多页面
                hasMorePages = parseAndPrintResults(html);
                page++;
            } catch (IOException | InterruptedException e) {
                e.printStackTrace();
                hasMorePages = false; // 如果出现异常，则停止抓取
            }
        }

        System.out.println("Finished fetching all pages.");
    }

    private static boolean parseAndPrintResults(String html) {
        Document doc = Jsoup.parse(html);
        
        // 选择包含仓库信息的HTML元素
        Elements repoElements = doc.select("div.f4.text-normal");
        
        // 如果没有找到仓库元素，返回false表示没有更多页面
        if (repoElements.isEmpty()) {
            return false;
        }
        
        // 迭代仓库元素并提取信息
        for (Element repoElement : repoElements) {
            Element linkElement = repoElement.selectFirst("a");
            if (linkElement != null) {
                String repoName = linkElement.text();
                String repoUrl = linkElement.attr("href");
                System.out.println("Repository: " + repoName);
                System.out.println("URL: " + "https://github.com" + repoUrl);
                System.out.println();
            }
        }

        // 检查是否有“下一页”按钮
        Elements nextPageElements = doc.select("a.next_page");
        return !nextPageElements.isEmpty();
    }
}
