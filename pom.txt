package com.example;

import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.ResponseBody;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;

public class GitHubSearch {
    private static final String GITHUB_API_URL = "https://api.github.com/search/code";
    private static final String TOKEN = "your_github_token"; // 替换为你的 GitHub 访问令牌
    private static final String KEYWORD = "your_keyword"; // 替换为你的关键字
    private static final String EXCLUDED_SUFFIX = ".txt"; // 替换为你想排除的后缀
    private static final String EXCLUDED_REPO_KEYWORD = "exclude_keyword"; // 替换为你想排除的仓库关键字
    private static final OkHttpClient client = new OkHttpClient();
    private static final ObjectMapper mapper = new ObjectMapper();

    public static void main(String[] args) throws IOException {
        searchCode(KEYWORD, EXCLUDED_SUFFIX, EXCLUDED_REPO_KEYWORD);
    }

    private static void searchCode(String keyword, String excludedSuffix, String excludedRepoKeyword) throws IOException {
        int page = 1;
        boolean hasResults = true;

        while (hasResults) {
            String url = String.format("%s?q=%s+in:file&page=%d", GITHUB_API_URL, keyword, page);
            Request request = new Request.Builder()
                    .url(url)
                    .header("Authorization", "token " + TOKEN)
                    .header("Accept", "application/vnd.github.v3+json")
                    .build();

            try (Response response = client.newCall(request).execute()) {
                if (!response.isSuccessful()) {
                    System.err.println("Request failed: " + response);
                    return;
                }

                ResponseBody responseBody = response.body();
                if (responseBody != null) {
                    JsonNode jsonNode = mapper.readTree(responseBody.string());
                    JsonNode items = jsonNode.get("items");

                    if (items == null || !items.isArray() || items.size() == 0) {
                        hasResults = false;
                    } else {
                        for (JsonNode item : items) {
                            String repoFullName = item.get("repository").get("full_name").asText();
                            String repoDescription = item.get("repository").get("description").asText("");
                            String filePath = item.get("path").asText();

                            // 排除包含特定关键字的仓库
                            if (!repoFullName.contains(excludedRepoKeyword) && !repoDescription.contains(excludedRepoKeyword)) {
                                if (!filePath.endsWith(excludedSuffix)) {
                                    String htmlUrl = item.get("html_url").asText();
                                    System.out.printf("Repository: %s, File: %s, URL: %s%n", repoFullName, filePath, htmlUrl);
                                }
                            }
                        }
                    }
                }
            }

            page++;
        }
    }
}
